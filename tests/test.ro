[my_calc]

- test_count int

// asserts bool
# AssertB(expected bool, actual bool, $caller_line)
  test_count++

  if expected != actual
    print("error:", nil, $caller_line, nil, ": expected:", expected, "actual:", actual)
    exit(1)

// asserts int
# AssertI(expected int, actual int, $caller_line)
  test_count++

  if expected != actual
    print("error:", nil, $caller_line, nil, ": expected:", expected, "actual:", actual)
    exit(1)

// asserts float
# AssertF(expected float, actual float, $caller_line)
  test_count++

  if expected != actual
    print("error:", nil, $caller_line, nil, ": expected:", expected, "actual:", actual)
    exit(1)

//-----------------------------------------------------------------------------
# seven() int
  return 7

# add(x int, y int) int
  return x + y

# upper(s string) string
  return s

# foo(x int) int
  return 19
  if x == 10
      - y int
      y = 23
      x = y
  return x + 3

## Point
  - x int
  - y int

- pt Point
    
// global pointer to function
- addfp = add

# twice(n *int)
  *n = *n * 2

- g_array [4]int

- gcount int
- gvar int
    
# set_gvar() int
  gvar = 119

:: Color
  | R // 0
  | G // 1
  | B // 2

# main() int

  ---
    - id int
    id = 114
    AssertI(125, id + 11)

  ---
    - i int = 19
    AssertI(19, i)

  ---
    AssertI(42, 39 + 3)

  ---
    - id int
    id = 0
    AssertI(114, id + 114)

  ---
    AssertI(4422, 3129 + 1293)

  ---
    AssertI(5533, 3129 + 1293+1111)

  ---
    AssertI(42, 20+22)

  ---
    - a int
    a = 12
    AssertI(12, a)

  ---
    - a int
    a = 11
    AssertI(11, a)

  ---
    AssertB(false, 12 == 11)

  ---
    AssertB(true, 42 == 42)

  ---
    - a int
    a = 39
    AssertB(true, a == 39)

  ---
    - a int
    a = 39
    AssertB(true, a == 39)

  ---
    AssertI(7, seven())

  ---
    AssertI(42, seven() + 35)

  ---
    AssertI(42, seven() + add(30, 5))

  ---
    - a int
    - b int
    a = 42
    if a == 12
      b = 11
    or
      b = 22
    AssertI(22, b)

  ---
    - a int
    - b int
    a = 42
    if a == 42
      b = 11
    or
      b = 22
    AssertI(11, b)

  ---
    - a int
    - b int
    a = 42
    if a == 42
      b = 1
    or
      b = 0
    AssertI(1, b)

  ---
    - a int
    - b int
    a = 42
    if a == 41
      b = 1
    or
      b = 0
    AssertI(0, b)

  // if statement
  // line comment at beginning of line
  ---
    - a int
    - b int
   // comment with incorrect indetation
    a = 42 // comment after vaid statement
    if a == 42
      b = 1
    or
      b = 0
    // comment with the same indetation
    AssertI(1, b)

  ---
    // if statement
    // line comment at beginning of line
    - a int
    - b int
  // comment with incorrect indetation
    a = 42 // comment after vaid statement
    if a == 42
      b = seven()
    or
      b = 0
    // comment with the same indetation
    AssertI(7, b)

  ---
    - s string
    - a = 33
    AssertI(33, a)

  ---
    - a int
    a = 42
    if a == 42
        - b int
        b = 13
   
        if  b == 13
            - c int
            c = 9
   
    //b = 4 // error
    a = 31
    AssertI(31, a)

  ---
    - a = seven() + add(30, 5)
    AssertI(42, a)

  ---
    AssertI(0, gvar)
    set_gvar()
    AssertI(119, gvar)

  ---
    AssertI(42, foo(10) + add(20, 3))

  ---
    - a int
    pt.x = 2
    pt.y = 3
    a = pt.y
    AssertI(5, pt.x + pt.y)

  ---
    - f float
    f = 3.14
    AssertF(3.14, f)

  ---
    AssertI(25, 0xF + 0Xa)

  ---
    - f float
    - g float
    f = 3.14
    g = 0.86
    AssertF(4.0, f + g)

  ---
    - i int
    if 13 == 13
      i = 42
    or
      i = 99
    AssertI(42, i)

  // C++ test
  // ==========================================================================

  // switch with multi case values
  ---
    - n = 6
    - x = 0

    switch n
    case 1
      x = 11
    case 2, 3, 4
      x = 22
    case 13, 55, 6
      x = 99
    default
      x = 255
    AssertI(99, x)

  // switch with multi case values
  ---
    - n = 3
    - x = 0

    switch n
    case 1
      x = 11
    case 2, 3, 4
      x = 22
    case 13, 55, 6
      x = 99
    default
      x = 255
    AssertI(22, x)

  // bool default
  ---
    - b bool
    - c = true
    AssertB(true, b == false)
    AssertB(true, c != false)

  // pointer variable
  ---
    - i int = 42
    - p *int
    p = &i
    AssertI(42, *p)

  // pointer argument
  ---
    - i int = 13
    twice(&i)
    AssertI(26, i)

  // array variable
  ---
    - a [8]int
    - i = 9
    a[2] = 87
    AssertI(87, a[2])
    a[5] = 92
    AssertI(92, a[5])
    i = a[2] + a[5]
    AssertI(179, i)

  // array variable with const expression
  ---
    - a [2 + 8]int
    - i = 7
    a[2] = 8
    AssertI(8, a[2])
    a[5] = 2
    AssertI(2, a[5])
    i = a[2] + a[5]
    AssertI(10, i)

  // global array variable
  ---
    g_array[3] = 99
    AssertI(99, g_array[3])

  // table
  ---
    - a = Color.R
    AssertI(0, a)
    AssertI(1, Color.G)
    AssertI(3, a + Color.G + Color.B)

  // module import
  ---
    AssertF(3.1415, my_calc.PI)
    my_calc.PI = 1.23
    AssertF(1.23, my_calc.PI)
    AssertI(42, my_calc.add(31, 11))

  // for zero times loop
  ---
    - i int
    - a = 13
    for i = 0; i < 0; i++
      a *= 2
    AssertI(13, a)

  // global pointer to function
  ---
    AssertI(2222, addfp(19, 2203))

  // local pointer to function
  ---
    - twicefp = twice
    - xxxxxxxxxxxxxxxxxxxxxxxxxxxx = -128
    twicefp(&xxxxxxxxxxxxxxxxxxxxxxxxxxxx)
    AssertI(-256, xxxxxxxxxxxxxxxxxxxxxxxxxxxx)

  // array initialization
  ---
    - a = [99, 11, 22, 33 + 9]
    AssertI(64, a[2] + a[3])

  // struct initialization
  ---
    - p = Point { x = 99, y = 11 }
    AssertI(99, p.x)
    AssertI(11, p.y)

    - q = Point { y = p.x - 49, x = p.y * 2 }
    AssertI(22, q.x)
    AssertI(50, q.y)

  // struct default initialization
  ---
    - p Point
    AssertI(0, p.x)
    AssertI(0, p.y)

  //------------------------------
  print(test_count, "tests done.")

  return 0
